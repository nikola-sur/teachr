# Compare all fits simultaneously
matplot(baseline_cox$time, cbind(baseline_cox$surv, baseline_weib, baseline_exp))
# Cox
cox_mod$coefficients[1]
# Weibull
-weib_mod$coefficients[2]/weib_mod$scale
# Exponential
-exp_mod$coefficients[2]/exp_mod$scale
baseline_cox2 <- survfit(cox_mod, newdata = data.frame(trt = 1, celltype = "squamous",
karnoc = 0, logdiagc = 0,
agec = 0, prior = "0"))
matplot(baseline_cox$time, cbind(baseline_cox$surv, baseline_cox2$surv))
veteran2 <- veteran
veteran2$time[veteran2$trt == 1] <- veteran2$time[veteran2$trt == 1] * 3
cox_mod2 <- coxph(Surv(time, status) ~ trt + celltype + karnoc + logdiagc + agec + prior, data=veteran2)
baseline_cox21 <- survfit(cox_mod2, newdata = data.frame(trt = 0, celltype = "squamous",
karnoc = 0, logdiagc = 0,
agec = 0, prior = "0"))
baseline_cox22 <- survfit(cox_mod2, newdata = data.frame(trt = 1, celltype = "squamous",
karnoc = 0, logdiagc = 0,
agec = 0, prior = "0"))
matplot(baseline_cox21$time, cbind(baseline_cox21$surv, baseline_cox22$surv))
weib_mod
cox_mod
weib_mod
class(weib_mod)
weib_mod$loglik
weib_mod$df
weib_mod$df.residual
#' @param obj Survreg object
#' @param type Either "AIC" or "BIC" for the type of information criterion
IC <- function(obj, type = "AIC") {
p <- length(obj$coefficients) # Number of parameters
n <- obj$df + obj$df.residual # Number of training observations
if (type == "AIC") {
out <- -2*obj$loglik[1] + 2*p
} else if (type == "BIC") {
out <- -2*obj$loglik[1] + log(n) * p
}
return(out)
}
IC(weib_mod, "AIC")
IC(exp_mod, "AIC")
IC(weib_mod, "BIC")
IC(exp_mod, "BIC")
?extractAIC
?extractAIC.coxph.penal
extractAIC(cox_mod)
extractAIC(cox_mod)
cox_mod
cox_mod$loglik
weib_mod
weib_mod$loglik
#' @param obj Survreg object
#' @param type Either "AIC" or "BIC" for the type of information criterion
IC <- function(obj, type = "AIC") {
p <- length(obj$coefficients) # Number of parameters
n <- obj$df + obj$df.residual # Number of training observations
if (type == "AIC") {
out <- -2*obj$loglik[2] + 2*p
} else if (type == "BIC") {
out <- -2*obj$loglik[2] + log(n) * p
}
return(out)
}
IC(weib_mod, "AIC")
IC(exp_mod, "AIC")
IC(weib_mod, "BIC")
IC(exp_mod, "BIC")
cox_mod$loglik[2]
cox_mod$df
View(extractAIC.coxph.penal)
stats::extractAIC.coxph
extractAIC.coxph.penal
extractAIC.coxph.penal()
View(extractAIC())
View(extractAIC)
-474.3867*(-2) + 16
cox_IC <- extractAIC(cox_mod)
cox_IC[2] # AIC
cox_IC[2] - cox_IC[1] + log(137)*8 # BIC
plot(cox_mod)
residuals(cox_mod)
?residuals.coxph
residuals(cox_mod, type = "martingale")
?residuals.survreg
ggcoxdiagnostics
library(survminer)
install.packages('survminer')
library(survminer)
ggcoxdiagnostics(cox_mod)
residuals(weib_mod, type = "response")
residuals(weib_mod, type = "deviance")
predict(weib_mod)
?predict.coxph
predict(cox_mod, type = "lp")
plot(predict(cox_mod, type = "lp"), residuals(weib_mod, type = "martingale"))
plot(predict(cox_mod, type = "lp"), residuals(cox_mod, type = "martingale"))
plot(predict(weib_mod, type = "lp"), residuals(weib_mod, type = "deviance"))
plot(predict(exp_mod, type = "lp"), residuals(exp_mod, type = "deviance"))
runif(100)
?sample
set.seed(5450277)
train_inds <- sample(1:nrow(veteran), floor(nrow(veteran)*0.7))
veteran_train <- veteran[inds, ]
set.seed(5450277)
train_inds <- sample(1:nrow(veteran), floor(nrow(veteran)*0.7))
veteran_train <- veteran[train_inds, ]
veteran_test <- veteran[-train_inds, ]
cox_mod_train <- coxph(Surv(time, status) ~ trt + celltype + karnoc + logdiagc + agec +
prior, data=veteran_train)
weib_mod_train <- survreg(Surv(time, status) ~ trt + celltype + karnoc + logdiagc +
agec + prior, data=veteran_train, dist="weibull")
exp_mod_train <- survreg(Surv(time, status) ~ trt + celltype + karnoc + logdiagc +
agec + prior, data=veteran_train, dist="exponential")
# Compute residuals on test data
predict(cox_mod_train, type = "response", newdata = veteran_test)
?predict.coxph
?predict.survreg
cox_mod
cox_mod
weib_mod
exp_mod
cox_mod
weib_mod
exp_mod
weib_mod
summary(weib_mod)
summary(exp_mod)
summary(cox_mod)
rm(list = setdiff(ls(), "veteran")) # Keep only "veteran" in environment
covariate_names <- c("trt", "celltype", "karno", "diagtime", "age", "prior")
pairs(veteran[, covariate_names])
for (cov_name in setdiff(covariate_names, "celltype")) {
print(hist(veteran[, cov_name], main = cov_name))
}
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(survival)
data(pbc)
data(cancer) # "lung", "veteran"
data(heart) # "stanford2"
head(pbc); head(lung); head(veteran); head(stanford2)
rm(list = setdiff(ls(), "veteran")) # Keep only "veteran" in environment
covariate_names <- c("trt", "celltype", "karno", "diagtime", "age", "prior")
pairs(veteran[, covariate_names])
for (cov_name in setdiff(covariate_names, "celltype")) {
print(hist(veteran[, cov_name], main = cov_name))
}
rm(list = setdiff(ls(), "veteran")) # Keep only "veteran" in environment
covariate_names <- c("trt", "celltype", "karno", "diagtime", "age", "prior")
pairs(veteran[, covariate_names])
for (cov_name in setdiff(covariate_names, "celltype")) {
plot(hist(veteran[, cov_name], main = cov_name))
}
rm(list = setdiff(ls(), "veteran")) # Keep only "veteran" in environment
covariate_names <- c("trt", "celltype", "karno", "diagtime", "age", "prior")
pairs(veteran[, covariate_names])
for (cov_name in setdiff(covariate_names, "celltype")) {
hist(veteran[, cov_name], main = cov_name)
}
rm(list=ls())
leuk <- read.table("C:/Users/Desktop/OneDrive - UBC/Courses/Spring 2022/STAT 536E/Code/leukemia.txt", header=TRUE, quote="\"")
View(leuk)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(survival)
survdiff(Surv(time, delta) ~ group, data = leuk)
library(survival)
leuk <- read.table("C:/Users/Desktop/OneDrive - UBC/Courses/Spring 2022/STAT 536E/Code/leukemia.txt", header=TRUE, quote="\"")
survdiff(Surv(time, delta) ~ group, data = leuk)
out <- survdiff(Surv(time, delta) ~ group, data = leuk)
out$chisq
?survdiff
library(survival)
data(pbc)
data(cancer) # "lung", "veteran"
data(heart) # "stanford2"
head(pbc); head(lung); head(veteran); head(stanford2)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(survival)
data(cancer)
head(veteran)
aa = na.omit(veteran)
library(dplyr)
vet_simple <- veteran %>%
select(trt, time, status)
head(vet_simple)
library(survival)
out <- survdiff(Surv(time, status) ~ trt, data = vet_simple)
out
library(survival)
out <- survdiff(Surv(time, status) ~ trt, data = vet_simple, rho = 0) # log-rank
out <- survdiff(Surv(time, status) ~ trt, data = vet_simple, rho = 1) # Wilcoxon
out <- survdiff(Surv(time, status) ~ trt, data = vet_simple, rho = 0.5) # G-rho (0.5)
library(survival)
lr_test <- survdiff(Surv(time, status) ~ trt, data = vet_simple, rho = 0) # log-rank
wil_test <- survdiff(Surv(time, status) ~ trt, data = vet_simple, rho = 1) # Wilcoxon
G05_test <- survdiff(Surv(time, status) ~ trt, data = vet_simple, rho = 0.5) # G-rho (0.5)
lr_test
wil_test
G05_test
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(survival)
data(cancer)
head(veteran)
rm(list = setdiff(ls(), "veteran")) # Only keep 'veteran' in the environment
library(dplyr)
vet_simple <- veteran %>%
select(trt, time, status)
head(vet_simple)
lr_test <- survdiff(Surv(time, status) ~ trt, data = vet_simple, rho = 0) # log-rank
lr_test <- survdiff(Surv(time, status) ~ trt, data = vet_simple, rho = 0) # log-rank
lr_test
wil_test <- survdiff(Surv(time, status) ~ trt, data = vet_simple, rho = 1) # Wilcoxon
wil_test
G025_test <- survdiff(Surv(time, status) ~ trt, data = vet_simple, rho = 0.25) # G-rho (0.25)
G025_test
G05_test <- survdiff(Surv(time, status) ~ trt, data = vet_simple, rho = 0.5) # G-rho (0.5)
G05_test
G075_test <- survdiff(Surv(time, status) ~ trt, data = vet_simple, rho = 0.75) # G-rho (0.75)
G075_test
table(vet_simple$trt)
plot(x = vet_simple$trt, y = vet_simple$time, pch = vet_simple$status)
plot(x = vet_simple$trt, y = vet_simple$time, pch = vet_simple$status, xlab="Treatment group", ylab="Time")
runif(100)
set.seed(1982282)
plot(x = vet_simple$trt + rnorm(length(vet_simple$trt), 0, 0.3), y = vet_simple$time, pch = vet_simple$status, xlab="Treatment group", ylab="Time")
set.seed(1982282)
plot(x = vet_simple$trt + rnorm(length(vet_simple$trt), 0, 0.1), y = vet_simple$time,
pch = vet_simple$status, xlab="Treatment group", ylab="Time")
set.seed(1982282)
plot(x = vet_simple$trt + rnorm(length(vet_simple$trt), 0, 0.05), y = vet_simple$time,
pch = vet_simple$status, xlab="Treatment group", ylab="Time")
set.seed(1982282)
plot(x = vet_simple$trt + rnorm(length(vet_simple$trt), 0, 0.02), y = vet_simple$time,
pch = vet_simple$status, xlab="Treatment group", ylab="Time")
lr_test$chisq
knitr::opts_chunk$set(echo = TRUE, fig.width = 6, fig.height = 4, fig.align = "center")
rm(list = ls())
rm(list = setdiff(ls(), "veteran")) # Keep only "veteran" in environment
covariate_names <- c("trt", "celltype", "karno", "diagtime", "age", "prior")
pairs(veteran[, covariate_names])
for (cov_name in setdiff(covariate_names, "celltype")) {
hist(veteran[, cov_name], xlab = cov_name)
}
knitr::opts_chunk$set(echo = TRUE, fig.width = 6, fig.height = 4, fig.align = "center")
rm(list = ls())
library(survival)
data(pbc)
data(cancer) # "lung", "veteran"
data(heart) # "stanford2"
head(pbc)
head(lung)
head(veteran)
head(stanford2)
rm(list = setdiff(ls(), "veteran")) # Keep only "veteran" in environment
covariate_names <- c("trt", "celltype", "karno", "diagtime", "age", "prior")
pairs(veteran[, covariate_names])
for (cov_name in setdiff(covariate_names, "celltype")) {
hist(veteran[, cov_name], xlab = cov_name, main = paste0("Histogram of ", cov_name))
}
hist(log(veteran[, "diagtime"]), main = "Histogram of log(diagtime)", xlab = "log(diagtime)")
veteran$logdiag <- log(veteran$diagtime)
veteran$trt <- veteran$trt - 1 # Convert to 0 or 1 (control vs. treatment)
veteran$prior <- as.factor(veteran$prior)  # Convert to factor
# Exponential regression
exp_mod <- survreg(Surv(time, status) ~ trt + celltype + karnoc + logdiagc +
agec + prior, data = veteran, dist = "exponential")
knitr::opts_chunk$set(echo = TRUE, fig.width = 6, fig.height = 4, fig.align = "center")
rm(list = ls())
library(survival)
data(pbc)
data(cancer) # "lung", "veteran"
data(heart) # "stanford2"
head(pbc)
head(lung)
head(veteran)
head(stanford2)
rm(list = setdiff(ls(), "veteran")) # Keep only "veteran" in environment
covariate_names <- c("trt", "celltype", "karno", "diagtime", "age", "prior")
pairs(veteran[, covariate_names])
for (cov_name in setdiff(covariate_names, "celltype")) {
hist(veteran[, cov_name], xlab = cov_name, main = paste0("Histogram of ", cov_name))
}
hist(log(veteran[, "diagtime"]), main = "Histogram of log(diagtime)", xlab = "log(diagtime)")
veteran$logdiag <- log(veteran$diagtime)
veteran$trt <- veteran$trt - 1 # Convert to 0 or 1 (control vs. treatment)
veteran$prior <- as.factor(veteran$prior)  # Convert to factor
plot(x=veteran$karno, y=veteran$time, pch=veteran$status, xlab="karno")
plot(x=veteran$logdiag, y=veteran$time, pch=veteran$status, xlab="log(diagtime)")
plot(x=veteran$age, y=veteran$time, pch=veteran$status, xlab="age")
veteran$karnoc <- scale(veteran$karno, center = TRUE, scale = FALSE)
veteran$diagtimec <- scale(veteran$diagtime, center = TRUE, scale = FALSE)
veteran$agec <- scale(veteran$age, center = TRUE, scale = FALSE)
veteran$logdiagc <- scale(veteran$logdiag, center = TRUE, scale = FALSE)
# Cox proportional hazards model
cox_mod <- coxph(Surv(time, status) ~ trt + celltype + karnoc + logdiagc + agec +
prior, data=veteran)
summary(cox_mod)
baseline_cox <- survfit(cox_mod, newdata = data.frame(trt = 0, celltype = "squamous",
karnoc = 0, logdiagc = 0,
agec = 0, prior = "0"))
plot(baseline_cox$time, baseline_cox$surv, xlab="time", ylab="Estimated survival probability",
main = "Cox proportional hazards model")
# Weibull regression
weib_mod <- survreg(Surv(time, status) ~ trt + celltype + karnoc + logdiagc +
agec + prior, data=veteran, dist="weibull")
summary(weib_mod)
gamma0 <- exp(weib_mod$coefficients[1])
weib_shape <- 1/weib_mod$scale
baseline_weib <- 1.0 - pweibull(baseline_cox$time, shape=weib_shape, scale=gamma0)
plot(baseline_cox$time, baseline_weib, xlab="time", ylab="Estimated survival probability", main  = "Weibull regression")
# Exponential regression
exp_mod <- survreg(Surv(time, status) ~ trt + celltype + karnoc + logdiagc +
agec + prior, data = veteran, dist = "exponential")
summary(exp_mod)
gamma0_exp <- exp(exp_mod$coefficients[1])
baseline_exp <- 1.0 - pexp(baseline_cox$time, rate = 1/gamma0_exp)
plot(baseline_cox$time, baseline_exp, xlab = "time", ylab = "Estimated survival probability",
main = "Regression with exponential distribution assumption")
remove.packages('goodGLM')
devtools::install_github('https://github.com/nikola-sur/goodGLM/')
remove.packages('goodGLM')
devtools::install_github('https://github.com/nikola-sur/goodGLM/')
library(goodGLM)
n <- 100L
b0 <- 1.0
b1 <- 0.1
x <- runif(n, 0, 1)
mu <- exp(b0 + b1*x)
y <- rpois(n, lambda = mu)
mod <- glm(y ~ x, family = poisson(link = 'log'))
library(goodGLM)
gof_output <- goodGLM(mod, groups = 10L, group_mode = "variance")
gof_output
remove.packages('goodGLM')
devtools::install_github('https://github.com/nikola-sur/goodGLM/')
library(goodGLM)
library(goodGLM)
library(goodGLM)
library(goodGLM)
library(askpass)
rm(list=ls())
rm(list=ls())
load("C:/Users/Desktop/OneDrive - UBC/Research/STAT 548/Marie/Data/13253_2017_282_MOESM1_ESM.rdata")
dataAr
dataAr[,,17]
10:3
c(1,2):c(3,4)
seq(1,10)
seq(c(1,2),c(10,11))
rm(list = ls())
f1 <- function(i, N) {
return(-log(1 - i/(N+1)))
}
f2 <- function(i, N) {
return(-log(1 - (i-0.5)/N))
}
f3 <- function(i, N) {
return(sum(1/(N:(N-i+1))))
}
i <- 50
N <- 100
f1(i, N)
f2(i, N)
f3(i, N)
i <- 1
N <- 1
f1(i, N)
f2(i, N)
f3(i, N)
N <- 100L
i <- 1:N
f1(i, N)
f2(i, N)
f3(i, N)
rm(list = ls())
# i: i-th order statistic
# N: sample size
# First approximation
f1 <- function(i, N) {
return(-log(1 - i/(N+1)))
}
# Second approximation
f2 <- function(i, N) {
return(-log(1 - (i-0.5)/N))
}
# sum_{k=1}^i 1/(N-k+1)
f3 <- function(i, N) {
return(sum(1/(N:(N-i+1))))
}
N <- 100L
i_vec <- 1:N
out1 <- f1(i_vec, N)
out2 <- f2(i_vec, N)
out3 <- numeric(length(i_vec))
for (i in 1:length(i_vec)) {
out3[i] <- f3(i, N)
}
plot(x = i, y = out1, type = 'l')
lines(x = i, y = out2)
plot(x = i_vec, y = out1, type = 'l')
lines(x = i_vec, y = out2)
lines(x = i_vec, y = out3)
plot(x = i_vec, y = out1, type = 'l', col = 'red')
lines(x = i_vec, y = out2, col = 'blue')
lines(x = i_vec, y = out3, col = 'black')
rm(list = ls())
# i: i-th order statistic
# N: sample size
# First approximation
f1 <- function(i, N) {
return(-log(1 - i/(N+1)))
}
# Second approximation
f2 <- function(i, N) {
return(-log(1 - (i-0.5)/N))
}
# sum_{k=1}^i 1/(N-k+1)
f3 <- function(i, N) {
return(sum(1/(N:(N-i+1))))
}
N_vec <- c(1, 10, 100, 1000, 10000)
for (N in N_vec) {
i_vec <- 1:N
out1 <- f1(i_vec, N)
out2 <- f2(i_vec, N)
out3 <- numeric(length(i_vec))
for (i in 1:length(i_vec)) {
out3[i] <- f3(i, N)
}
plot(x = i_vec, y = out1, type = 'l', col = 'red', xlab = "i",
ylab = "(Approximation) to expected value of i-th order statistic", main = paste0("N = ", N))
lines(x = i_vec, y = out2, col = 'blue')
lines(x = i_vec, y = out3, col = 'black')
readline()
}
N_vec <- c(5, 25, 125, 625)
for (N in N_vec) {
i_vec <- 1:N
out1 <- f1(i_vec, N)
out2 <- f2(i_vec, N)
out3 <- numeric(length(i_vec))
for (i in 1:length(i_vec)) {
out3[i] <- f3(i, N)
}
plot(x = i_vec, y = out1, type = 'l', col = 'red', xlab = "i",
ylab = "(Approximation) to expected value of i-th order statistic", main = paste0("N = ", N))
lines(x = i_vec, y = out2, col = 'blue')
lines(x = i_vec, y = out3, col = 'black')
readline()
}
rm(list = ls())
# i: i-th order statistic
# N: sample size
# First approximation
f1 <- function(i, N) {
return(-log(1 - i/(N+1)))
}
# Second approximation
f2 <- function(i, N) {
return(-log(1 - (i-0.5)/N))
}
# sum_{k=1}^i 1/(N-k+1)
f3 <- function(i, N) {
return(sum(1/(N:(N-i+1))))
}
N_vec <- c(5, 25, 125, 625)
for (N in N_vec) {
i_vec <- 1:N
out1 <- f1(i_vec, N)
out2 <- f2(i_vec, N)
out3 <- numeric(length(i_vec))
for (i in 1:length(i_vec)) {
out3[i] <- f3(i, N)
}
plot(x = i_vec, y = out1, type = 'l', col = 'red', xlab = "i",
ylab = "(Approximation) to E[T_(i)]", main = paste0("N = ", N))
lines(x = i_vec, y = out2, col = 'blue')
lines(x = i_vec, y = out3, col = 'black')
readline()
}
?pt
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
n_vec <- 100:110
for (n in n_vec) {
delta <- 0.5 * sqrt(n)
cv <- qt(0.95, df = n-1)
power <- 1 - pt(cv, df = n-1, ncp = delta)
print(paste0("n = ", n, ", power = ", power))
}
n_vec <- 30:40
for (n in n_vec) {
delta <- 0.5 * sqrt(n)
cv <- qt(0.95, df = n-1)
power <- 1 - pt(cv, df = n-1, ncp = delta)
print(paste0("n = ", n, ", power = ", power))
}
rm(list = ls())
ex711=read.table("example711.txt",skip=1,header=T)
getwd()
library(devtools)
?create_package
create_package()
getwd()
setwd("C:/Users/Desktop/GitHub/teachr")
create_package("")
create_package("../teachr")
